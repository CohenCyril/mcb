30/7/2014 - Enrico, Assia
=========================

--- Editorial board:

- few people, deciding the plan, writing a skeleton, then involving
more people for precise tasks. Enrico, Cyril, Assia already
explicitely expressed interest.
 
- external readers: after trying to find names of potential interested
guinea pigs, we think 'crowd-reviewing' might be the best
option. I.e. put versions of the draft on-line, idealy with a
goolge-doc/inria-pad-like engine which allows people to leave sticky
comments. 

--- Logistics

- Propose a MathComp meeting on this topic around mid October, write
  the message in September.
- Have regular general meetings (once, twice a year?), with
  presentation of each chapter by the people in charge of it in front
  of the others.
- Check that we can use MathComp money for this.
- In the end, publish the book under a similar form as the HoTT book
  (no editor or something like College publications).

--- Target audience:

We identify three groups of potential readers:
1) Mathematicians: definition = in the complement of the PL people,
typical target of Software Foundations or A. Chlipala's book.
There might be a pb with people that do not care
about constructive mathematics. May be computer algebra people are an
easier target (but they can be impregnated with other habits, like
what is an expression). In any case, we should not spend energy to
justify too much the constructive point of view (out of scope).
People having declared their interest in reading such a text:
Marie-Francoise Roy (may be not for producing a lot of Coq code, but
for understanding what a formalization represents), Marc Mezzarobba,
Grace people (Ben, Daniel)?

2) 'Standard Coq' users: they could learn methodological points
(discipline in quantifiers, naming, script policies, etc.) hence these
'mantras' (copyright Enrico) should be visible to a reader who turns
pages quickly.
Profile: Strasbourg people, Pierre CastÃ©ran, but also PL,
Compcert guys, ?

3) Interns/Students: what Augustin missed, what could help Thomas.
  
--- General schema:
- like in Coq Art, use markers for *basic*, *advanced* and *hard*
  - *basic* is for simple users: they use what is in there
  - *advanced* is for users that need to extend the library, like add their
    own finite type
  - *hard* is for people willing to understand /how/ the mecanisms are
    implemented
  - the book must be useful even if one reads only the *basic* part
- chapters shall contain non *basic* sections
- few chapters may be labelled non *basic* (i.e. no section is basic)
- to read chapter 2 *advanced* section, one has to read chapter 1 *advanced*
  section
- avoid as much as possible comparison with std lib but do not fear it when
  needed.
- keep in mind Cyril's ambition: what does formalization brings to your
  understanding of maths (might be hard to achieve in this single book).

--- Story:
- it would be nice to aim at a theorem that involves diverse parts of the
  library.  No precise idea yet.
- it should be possible to increase the complexity of the math and of the
  techniques in tandem.  E.g. chapter 0 talks about bool and nat, is_true
  is visible.  == is attached to a specific comparison function, on nat.
  Then one slowly improves, hiding is_true.  Later on, one overloads ==,
  maybe when some algebra comes in to play.

--- Proof language:
- agreement that it is the least interesting part (for the book) hence
  we shall use only basic features (in the basic part) and slowly add
  a few more.  No big chapter on the proof language.  Advanced features
  shall be introduced when/if they are needed.
- the point is that the non experts should not spend energy in learning
  have /blaP[ {2}-> | * ] := fobar, baz.
- some constructs are very specific to the way one formalizes, hence deserve
  to be introduced with special care.  Namely /views and rewriting.
  then basic use of apply and have plus => should suffice.


--- Content
Chapter 0: "Computational Thinking"
- aim: Coq does compute, what the hell, use it! Or do HOL...
- privileged target: mathematician
- challenge: not loose mathematicians, motivate the ssr approach to a CS person
- E.g. (should it be in chapter 0?): why "Inductive nat := O | S" and
  not "Inductive nat := O | S | Plus..".
  + first take, following wikipedia page, Inductive nat := 0 | S |
  plus |... + axioms + Definition le a b := exists m, a + m = b
  + second take, std Coq style : Inductive nat  := 0 | S. +
  Fixpoint plus ... + Definition le a b := exists m, a + m = b. 
  (proof that 2 + 3 = 5 easier, but to prove 2 <= 5 you still need to
  calculate 3).
  + third take Fixpoint plus, Fixpoint le.
  + fourth take will come later on, le in terms of minus so that this one
  lemma comes for free.
- should sound natural and easy to a CS person (but with the ssr twist)
- should sound different but well motivated to a Coq user (do show, maybe in
  the exercises, that leqn is 100 times better than "Inductive le").  Try to
  reproduce the shock we had the first time we used boolean predicates.  It may
  help to compare, in the *advanced* section, the approach with the standard
  one, so that one sees two proof scripts in the same page.

Chapter ?: "Conventions"
- aim: introduce the most pervasaives conventions in the library, live with
  Search.
- challenge: not too boring
- In practice an introduction to ssrfun.v
  - find examples of most notations,
  - introduce /=
  - key things:
    - .1 .2 projections
    - =1 =2
    - \o
    - {foo } for types, e.g. {morph }
    - [bla ] for terms, e.g. [fun x => x + x], [eta f]
- requires, or is the place where, curry howard is explained (HO stuff, like
  transitive).
- the alternative is to not have this chapter at all, and spread it all around
- it may be worth to have in same place the index of MATHEMATICAL notations
  reserved in ssrfun (and alsewhere), so maybe this chapter is the place.  Like
  the index of notations in a book.
  - `| |
  - :* ^+ ...
  - :&: ...
- rel/pred
- [*] nosimpl
  [*] locked idea

Chapter 1: "logic & numbers"
- aim: provide material for ch.2, follow work on ch.0, rewrite.
- challenge: can we do something with == bound to nat and without eqP?
- main points: views, rewrite. 
- things to show:
 - & ||
 - views
   - andP
   - leqP
 - + - * .+1 ./2
 - Num ...
 - tail rec
 - <= <
 - a <= b <= c
 - spec for .. <= < ..
   - refine the use of views
 - [*] advanced used of views linking = in rewriting (reflect -> bool -> P)
       The implementation is advanced and uninteresting, but the usage
       reasonable.

Chapter 2: "Equality"
- aim: introduce eqType, its theory and the _ == _ generic notation
- challenge: a lot of stuff
- important points:
  1) what is eq type, from a logical standpoint
     (compat with Leibnitz = canonical, decidable)
     again very natural in a programming setting: a compiler must
     emit code for 'if a==b then else'
     in constrast with 'a=b' in standard coq that is much moregenral
  2) alebrization v.s. plain polymorphism (cfr ad-hoc polymorphism).
     you can hardly program interesting functions an a polymorphic
     datatype a la ML.  you cannot prove.  E.g. you can code List.rev,
     how can you state the lists have the same objects? (note we want == in the
     predicates).  Orelse, you can not even code 'List.mem' without assuming
     you can compare items.  And you expect this comparison to be compatible
     with the logical property of substitutivity (=).
  3) retroffiting model: you have the theory of == and you plug instances
     a posteriori (in math you would recognize/prove that (X,+,*) forms a R).
- examples: seq

Chapter 3: "Arithmetics"
- nat, div
  - subtype
  - [*] example of GG on defining eqType on a datatype by injection into a seq.

Chapter/Annex chapter: The type theory, Curry Howard,
inductives. Avoid being too heavy in this part and point to other references
if needed but give enough information for the book to be enough self
contained. We probably need the help of external, newcomer readers
here to achieve the right balance. Try to depart from the 'Coq as a
programming language' tradition.  Exception: 1 bit of curry howard is
pervasive: application as theorem instantiation.  When we write (th x) or (th
px) we use th as a function.  This goes in tandem with a few words on implicit
arguments.

