Question d'Enrico: peut-on remettre le théorème des 4 couleurs à disposition.
 
Georges: j'y ai travaillé récemment.  Rebranché sur ssrnum.

Remarque de Maxime sur le fait que le chemin le plus fréquent vers odd-order theorem ne permet pas d'obtenir la version la plus récente de ssreflect.

Georges: le travail récent sur les 4 couleurs est motivé par la volonté de comparer avec flyspeck, où l'on retrouve la même preuve sur le lien entre critère de planarité d'Euler et critère de Jordan.  Aussi, il fallait remettre les commentaires de documentation aux normes en cohérence avec les habitudes les plus récentes.

Question à résoudre: Est-ce qu'on veut porter tout Math-Comp en ssreflect-1.5, et vers les nouvelles versions de Coq.  Essentiellement, faut-il utiliser Arguments?  Remplacer les utilisations de nosimpl (dans la philosophie "enlevons des hacks de la bibliothèque").

Réponse : Cyril, Enrico, Assia répondent positivement, pour se partager des fichiers.

Le hack nosimpl redevient utile de toutes façons pour les définitions locales introduites à l'aide de la tactique "pose".

Beaucoup de "nosimpl" sont cachées à cause de l'idiome de double projection.

C'est un effet de bord des type-classes d'avoir enlever les utilisations de nosimpl, mais ça ne décrit pas les seuls endroits où du travail est nécessaire.

Cyril : doit on aussi remplacer les utilisations de "prenex implicit".  Vaut-il mieux les remplacer? Georges: mais si on doit tous les faire, ce sera très verbeux.  Attention, le comportement de maximal implicit est incohérent actuellement, à cause des ruptures de régularité apportées par les arguments non implicites au milieu des arguments.  Il manquait l'eta-convertibilité au moment où cela a été ajouté.

========================
Contributions externes à Math-Comp.


Importanc de conserver un nombre d'auteur assez faible, mais complètement impliqué.

Discussion sur les distinctions entre les différents niveaux de difficulté.

Avoir des scripts annotés et bien expliqués sur la façon de les obtenir.

"Comment détecter qu'une définition n'est pas la plus appropriée"?

Un des messages importants qui devraient passer idéalement, c'est qu'il y a souvent plusieurs définitions possibles, et cela ne va pas de soi que la première définition n'est pas la forcément la même.

Techniques d'amélioration du feedback.

Trouver la bonne élimination, la bonne vue.  Le résultat final ne montre pas toutes les hésitations.

Failed attempts: explications.

==========================
index(es).  Pour ssreflect, plus que pour d'autres approches, il est important de noter des moyens d'entrée

Fiches rapides: "How-to",  ("How not to", idée de Maxime)

Sur les exercices: attention, chaque exercice peut représenter beaucoup plus de travail que ce à quoi on est habitué.  Comment le maintenir dans le long terme.


Georges: Prouver des choses sur des suites récurrentes, c'est souvent plus facile de le faire en Coq que de le faire dans une preuve mathématique standard.

==========================
Chapitre 0, Assia propose de s'inspirer de la toute première partie du manuel de référence ssreflect. 


Chapitre 1,
  Une phrase "reasoning principles without a computational content become axioms"
  Assia: penser que l'on s'adresse aux mathématiciens: les axiomes qui sont utilisés habituellement dans la description de la logique ne sont pas tous destinés à devenir des axiomes dans le calcul des construction.  Le tiers-exclus l'est, mais pas "A |- A", parce que le second a une interprétation calculatoire, mais pas le tiers exclus.

Au coeur, il faut garder la notion de fonction, l'abstraction, l'application, et la règle beta.

Le langage formel que le système comprend nativement.

C'est ici qu'il faudrait introduire la notion de type.  et avec la notion de fonction.

Attention, faire comprendre des types dépendants à des mathématiciens.

Mettre les bonnes définitions permet d'assurer que le système sait faire plus de choses de façon automatique grâce à son langage natif.

La préface doit jouer un rôle ici, car il s'agit de présenter la langue de travail plutôt que de faire de la logique pour la logique.

Chapitre 2.

Devrait contenir une section "Elements of style: arguments implicites"

==========================
Chapître 3.
 
 Enrico: il y a aucun problème à décrire des cas particuliers, sans donner l'ensemble de la mécanique dont ils sont une instance.

Proposer une preuve bien illustrée ici.  Commencer par une preuve naïve puis expliquer la ré-ingéniérie de preuve.

Elements of style: dans quel ordre placer les quantifications.

Elements of style: Insister sur l'utilisation de théorèmes déjà existants.

Elements of style: discipline de nommage.
 
Chapitre 4.
Mixing data and proofs.

records à propriété booléenne, justifier par UIP, décrire les coercions.

Il faut décrire dans ce chapitre la tension sur le fait que les objets qualifiés sont faciles à utiliser difficiles à construire.

Ajouter à cet endroit comment on gère la question des ensembles.

Chapître 5.

Il semble que 4 et 5 peuvent être revus pour être faits de façon conjointe.  La séparation entre les deux chapîtres n'est pas entièrement claire.

Pour la deuxième partie.

Suggestion de glisser la section 7 après la section 10.  Attention à bien inclure des résultats sur les polynômes aussi.
